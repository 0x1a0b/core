

root {{

type: object-opt
description: Global server configuration
see: reverseSite


param-serverProcess: is the number of processes to run in the case of using multi-core CPUs, **default automatic adjustment**. 
param-userId: is the user id used to jail process with setuid()
param-groupId: is the user id used to jail process with setgid()
param-adminName: defines the name of the technical gatejs admin
param-adminMail: defines the mail of the technical contact
param-hostname: is the name of the gate.js instance. This information is important when using gate.js inside a cluster
param-runDir: is the running directory use to store different files such as sockets, pipes... there is no default value.
param-dataDir: is the global data directory. It will store files such as cached files or proxy temporary
param-logDir: is the logging directory use to store log files
param-confDir: is the directory to store specific gate.js configuration files
param-http: An object defined in ::http
param-plugins: An array defined in ::plugins
param-agent: An object defined in ::agent
param-acn: An object defined in ::acn
param-pipeline: An object defines **pipelines** for forward proxy explained in ::pipeline:forward

mark {{
Global server configuration is used to be in the directory **/etc/gatejs/config.js**.

It corresponds to the global gatejs configuration.
}}

example {{
var serverConfig = function(bs) { return({
	hostname: "testServer0",
	runDir: "/tmp/gatejs",
	dataDir: "/path/to/dataDir",
	logDir: "/var/log/gatejs",

	http: {
		generalInterface: {
			type: 'forward',
			port: 8080,
		},
	},
})};
}}

}}

// - - - - - - - - - - - - - - - - - - - - - - 

agent {{

type: object-opt
extends: root
scope: root
description: Agent manager

param-http: number of connections for HTTP
param-https: number of connections for HTTPS
param-httpTproxy: number of connections for HTTP using **TPROXY**
param-httpsTproxy: number of connections for HTTPS using **TPROXY**

mark {{
Agents are made to keep alive connections made by gatejs.

The default value for these parameters is 15 connections per address:port.
}}

example {{
var serverConfig = function(gcnf) { return({
	// [[..]]
	agent: {
		http: 30,
		https: 30,
		httpTproxy: 30,
		httpsTproxy: 30,
	},
})};
module.exports = serverConfig;
}}


}}

// - - - - - - - - - - - - - - - - - - - - - - 

plugins {{

type: array-string
extends: root
scope: root
description: Plugins manager

mark {{
List of plugins directories as following
}}

example {{
var serverConfig = function(gjs) { return({
	// [[..]]
	plugins: {
		'/path/to/plugin/one',
		'/path/to/plugin/two',
	},
})};
module.exports = serverConfig;
}}


}}

// - - - - - - - - - - - - - - - - - - - - - - 

blacklist {{

type: object-opt
extends: root
scope: root
description: Dynamic blacklist manager
see: opcode:dos

param-maxPoint: Number of maximum points allowed before to get a ban (default 10000 points)
param-reducePoint: Number of points which will be subtracts of the current points (default 1000 points)
param-l3banTime: Time in second before the ban gets released (default: 300 seconds) 


mark {{
### Behavior
The Dynamic blacklist creates a special **chain rule** by default its name is **GATEJS**. 

Different programs in gatejs are allowed to detect bad users (users attempts to break/alter something). For example the HTTP opcode **dos** will try to ban people who are trying to stop your services.

The banishment process works as following :
* A program sends an alert with X points (X is defined by program side)
* The dynamic blacklist receives and adds those points into an entry hashed by the ip address
* If current IP points is upper than **maxPoint** (default: XXX) then the IP address is banned for **l3BanTime** seconds using a firewall rule
* Each 60 seconds a background process works to remove outdated bans from firewall rules and at each time a **reducePoint** is applied to every entry in order to reduce the current entry points, once points are at zero then entry is removed


### Activation
To activate the master process of the dynamic blacklist manager you must set to **object** the key **blacklist** in your server configuration file.

As following
}}

example {{
var serverConfig = function(gcnf) { return({
	// [[..]]
	blacklist: { },
})};
module.exports = serverConfig;
}}

mark {{
After all of that you will have to execute the firewall **chain rule**.

#### Chain rule for Linux
```
iptables -A INPUT -j GATEJS
iptables -A OUTPUT -j GATEJS
iptables -A FORWARD -j GATEJS
```

### Development side

At any time a developper can send a message to the Dynamic blacklist just by using the **message()** in **core.blacklist**.

```
gjs.lib.core.blacklist.message(
	'127.0.0.1',
	'HTTP Denial of service',
	1000
);
```

In this example 1000 points will be added to the entry of 127.0.0.1. The system leaves a message that indicates the kind of problem.
So in this example with general blacklist settings, after 10 executions of the **message()** function before 60 seconds the IP address will be banned.

}}


}}
