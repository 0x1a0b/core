

opcode:forward:proxyPass {{

extends: http:forward:opcodes
scope: pipeline
type: object-opt
description: proxyPass - Forward proxy request retransmission opcode

param-mode: is the forwarding method used to connect to source servers **see Modes below**
param-timeout: is the connection timeout in second, default 30 seconds
param-allowConnect: to allow CONNECT methods on the interface
param-localAddress: is used to specify the IP to bind for network connections. NOTE: In the case of network interface alias don't forget to use a /32 mask

mark {{
HTTP forward proxy pass operation opcode used to connect to the source server.

*Info*: This opcode can be used only in forward proxy operation

### Modes
* **host** : use the request host HTTP header with IP DNS resolving in order to emit connections
* **tproxy-src-host** spoof the source address and use the IP DNS resolving to emit connections
* **tproxy-src-dst** spoof the source and use the destination address to emit connections (need tproxy server interface ON)
* **tproxy-dst**  do not spoof the source address but use the destination address to emit connections (need tproxy server interface ON)
 
}}

example {{
['proxyPass', {
	mode: 'host',
	timeout: 100,
	allowConnect: false
}]
}}

}}

opcode:forward:injection {{

extends: http:forward:opcodes
scope: pipeline
type: object-opt
description: injection - On-the-fly HTML code injection

param-func: Execute a callback instead of inline code. Function must return the code to be embedded.
param-code: HTML to be embedded in the page

mark {{
Injection is an opcode used to embed code on-the-fly into HTML pages.

Once the DOM structure is identified the process will inject the HTML code (specified in the example below) in the body of the page.

The process is fully async. 

}}

example {{
['injection', {
	code: "<h1>w00t injection</h1>"
}],
}}

}}


opcode:forward:store {{

extends: http:forward:opcodes
scope: pipeline
type: object-opt
description: store - URL cache store hash rewriting

mark {{
gatejs **store** opcode manage the URL rewriting for cache store hash.

Each object in the cache has it own reference calculated using a hash. It is really useful to have to way to modify the hash before the reference creation. 

It works as squid store_url. 

}}

example {{
['store']
}}

mark {{
### Explanation
Store controlers are located in **pipeForward/store** and are formated like below.
}}

example {{
// to explained
}}

}}

