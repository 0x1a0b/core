
opcode:acl {{

extends: http:forward:opcodes http:reverse:opcodes
scope: pipeline
type: object-kv
description: acl - Access Control List
key: IP address w/ or w/o CIDR (IPv4 and IPv6)

mark {{
The object key correspond to a CIDR address and the value to the state of the rule. If **true** is set then the address will be **accepted** or **rejected** depending **default** policy and if set to **false** the address will not be used.

You can use **default** as object key to define the default policy. true all accepted and false all is rejected. **The default policy is false for rejected**.
* If **default** is set to **true** (then accepted) then all address matched rules will be **rejected** (blacklist mode)
* If **default** is set to **false** (then rejected) then all address matched rules will be **accepted** (whitelist mode)
}}

example {{
/* set & hide request headers */
['acl', { 
	'127.0.0.1' => true,
	'192.168.0.0/24' => true,
}],
}}

}}

opcode:headers {{

extends: http:forward:opcodes http:reverse:opcodes
scope: pipeline
type: object-opt
description: headers - Headers manipulation opcode

param-request: is a boolean used to activate header manipulation on request, by default is false which means it works on responses
param-set: is a Javascript object used to set new headers 
param-hide: is a Javascript array used to disable or hide headers

mark {{
The "headers" opcode is used to manipulate the request and response headers.It works for reverse & forward proxy 

*Info*: This opcode can be used both in reverse and forward proxy

It can set or hide headers in both request & response. 

By default it acts on the response by defining options you can work on request. See options below.

Note: gatejs headers searching is case insensitive 
}}

example {{
/* set & hide request headers */
['headers', { 
	set: { 
		"X-Header-One": 'Alasklikeuflux',
	},
	hide: [
		'X-FRAME-options'
	]
}],
}}

}}

// - - - - - - - - - - - - - - - - - - - - - - 

opcode:cache {{

extends: http:forward:opcodes http:reverse:opcodes
scope: pipeline
type: object-opt
description: cache - Data caching opcode

param-exclusive: set exclusive cache behavior
param-ignoreCache: ignore cache-control from server response.
param-stale: allow stale time for objects without cache age.
param-staleTime: set the default stale time 
param-feeding: true or false, activate or not the caching feeding feature. Default true.
param-dirDiviser: number of division operate on the filename. Default 8.

mark {{
*Info*: This opcode can be used both in reverse and forward proxy

}}

example {{
['cache', { 
	exclusive: true,
	ignoreCache: false
}],
}}
}}

// - - - - - - - - - - - - - - - - - - - - - - 

opcode:acn {{

extends: http:forward:opcodes http:reverse:opcodes
scope: acn pipeline
type: object-opt
description: acn - Use Associative Cache Network resolver

mark {{
Use Associative Cache Network to resolv remote cache object.

*Info*: This opcode can be used both in reverse and forward proxy
}}

example {{
['acn'],
}}

}}

// - - - - - - - - - - - - - - - - - - - - - - 

opcode:executer {{

extends: http:forward:opcodes http:reverse:opcodes
scope: pipeline
type: object-opt
description: executer - Run Javascript function

mark {{
**executer** opcode is used to run a Javascript function in the pipeline.

It allows user to define a special process for request and response.

*Info*: This opcode can be used both in reverse and forward proxy
}}

example {{
['executer', function(pipe) {
	if(pipe.request.headers.host.match(/^wpad(:[0-9]+)?$/)) {
		pipe.stop();
		pipe.response.setHeader("Content-Type", "application/x-ns-proxy-autoconfig");
		pipe.response.write(
			'function FindProxyForURL(url, host) {\n' +
			'	return "PROXY wpad:80; DIRECT";\n' +
			'}'
		);
		pipe.response.end();
	}
}],
}}

mark {{

}}
Here, the request is catched first with executer, and if the host is "wpad", a specific response is sent.

It may be used as-is for an automatic forward proxy in a LAN.
See [Web_Proxy_Autodiscovery_Protocol](https://en.wikipedia.org/wiki/Web_Proxy_Autodiscovery_Protocol) and [Proxy_auto-config](https://en.wikipedia.org/wiki/Proxy_auto-config)
}}


// - - - - - - - - - - - - - - - - - - - - - - 

opcode:dos {{

extends: http:forward:opcodes http:reverse:opcodes
scope: pipeline blacklist
type: object-opt
description: dos - Denial of service prevention
see: blacklist
since: 1.4

param-rps: number of accepted requests per second (default: 25)
param-banTime: the ban time while a HTTP 429 error is sent to the client. (default: 60 seconds)
param-disableBlacklist: set to **true** to disable Dynamic Blacklist (default: false)
param-markPoints: corresponds to the points added into the Dynamic Blacklist (default 1000 points per limit reached)

mark {{
The **dos** opcode is used to control the requests flow sent by users to gatejs. 

A user corresponds to an IP address.

It has 2 levels of blocking mode. 

* Firstly, if a user sends more than **rps** per second then he gets banned for **banTime**.
* Secondly, if the user continues to reach the limit (depending the **markPoints** scoring) he will get banned following the Dynamic Blacklist (firewall rule)

Actually **markPoints** is set by default to 250 which means that the user has to reach 40 times the limit (**rps**) to get banned via the firewall

*Info*: This opcode can be used both in reverse and forward proxy
}}

example {{
['dos', { 
	markPoints: 250,
	rps: 100,
	banTime: 60,
	disableBlacklist: false
}],
}}
}}

// - - - - - - - - - - - - - - - - - - - - - - 

opcode:gzip {{

extends: http:forward:opcodes http:reverse:opcodes
scope: pipeline
type: object-opt
description: gzip - GZIP on-the-fly compression
since: 1.4

param-level: 1 gives best speed, 9 gives best compression level (default: -1 zlib internal default ~6)
param-memLevel: how much memory should be allocated for the internal compression state. (default: 8)
param-types: An object representing the content type allowed to be compressed

mark {{
Compression of responses often allows you to significantly reduce the size of transmitted data. However, since compression happens at run time it can also add considerable overhead which can negatively affect performance. Compression happens before a response is sent to the client and can be applied to all responses that are not yet compressed (for example, by a proxied server).

*Info*: This opcode can be used both in reverse and forward proxy
}}

example {{
['gzip', { 
	level: -1,
	memLevel: 8,
	types: {
		'application/javascript': true,
		'text/plain': true,
		'text/html': true,
		'text/css': true,
	}
}],
}}
}}


